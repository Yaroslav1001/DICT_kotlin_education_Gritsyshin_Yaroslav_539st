import java.time.LocalDate
import java.util.*

fun main() {
//    1. На вході ціле число, повернути рядок “Even” для парного числа та “Odd” в іншому випадку.

    print("Введіть ціле число >")
    val num = readln().toInt() // зчитує ціле число
    val result = if (num % 2 == 0) "Even" else "Odd" // визначає, чи є це число парним або непарним
    println(result)

//    2. Помножити задане число на 4, якщо воно парне і на 5 інакше.

    val multiply = if (result == "Even") num * 4 else num * 5
    println(multiply)

//    3. Повернути негативне число. Наприклад, вхід: 1, на виході: -1; для -5 повернути -5.

    val returnNegative = if (num > 0) num * -1 else num // якщо введено позитивне число, то повертає його негативний еквівалент
    println(returnNegative)

//    4. За роком визначити вік. (1 століття охоплює період з 1 по 100 рік включно і т.д.).

    print("Введіть ваш рік народження >")
    val yearOfBirth = readln().toInt() // зчитує ціле число
    val currentYear = LocalDate.now().year  // визначає поточну дату за допомогою класу "java.time.LocalDate"
    val age = currentYear - yearOfBirth // віднімає дату користувача від поточної
    println("Вік: $age!")

//    5. Задано масив цілих чисел, котрому необхідно визначити найменше ціле число.
//    Наприклад, для [34, 15, 88, 2], відповідь 2.

    val numbers: Array<Int> = arrayOf(34, 15, 88, 2, 2, 8) // створення числового масиву
    val minimumNumbers = numbers.min() // визначення найменшого значення методом "min()"
    println("Найменше значення масиву - $minimumNumbers")

//    6. Задано масив цілих чисел, для якого потрібно знайти два найбільші числа.

    val massive = listOf(1, 5, 87, 45, 8, 8)
    val sortedMassive = massive.sortedDescending() // проводиться сортування чисел за спаданням
    println("Найбільші два числа масиву - ${sortedMassive[1]}, ${sortedMassive[0]} з $massive")   // у виводі обираю два перших числа з відсортованого списку (бо вони найбільші)

//    7. Даний масив цілих чисел, котрому повернути масив, де перший елемент є
//кількістю позитивних чисел, а другий – сумою негативних чисел. Якщо на
//вході порожній масив або null, необхідно повернути порожній масив.

    val massiveTwo = listOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15)
    val positiveArray = massiveTwo.filter { it >= 0 }.size // Виконую сортування списку (обираю тільки позитивні числа). За допомогою методу "size" отримую розмір списку
    val negativeArray = massiveTwo.filter { it < 0 }.sum() // обираю тільки негативні числа такими самим методом та сумую відсортовані значення методом "sum"
    println("Кількість позитивних чисел - $positiveArray, Сума негативних чисел - $negativeArray")

//    8. Порахувати кількість голосних букв у рядку (a, e, i, o, u, y голосні).

    print("Введіть рядок на англійській мові > ")
    val input = readlnOrNull() ?: "" // перевіряю якщо користувач нічого не ввів або ввів порожній рядок, то змінна рядка приймає пусте значення замість 'null' (Це робить програму більш стійкою до некоректного вводу користувача)
    val vowels = setOf('a', 'e', 'i', 'o', 'u', 'y') // творення списку з голосними літерами
    var count = 0 // стартове значення для лічильника
    for (char in input.lowercase(Locale.getDefault())) {  // цикл, який при кожному збігу голосних додає 1 до змінної "count"
        if (char in vowels) {
            count++
        }
    }

    println("Кількість голосних букв у рядку: $count")

//    9. Дано рядок, для якого необхідно знайти середній символ. Якщо довжина
//непарна, то повернути середній символ, інакше – поверніть середні 2 символи.

    print("Введіть рядок на англійській мові > ")
    val inputString = readlnOrNull() ?: ""
    val middleIndex = inputString.length / 2 // Цей рядок коду визначає серединний індекс рядка inputString. Довжина рядка ділиться на 2, щоб знайти середину рядка.
    val resultString = if (inputString.length % 2 == 0) {  // визначає чи є довжина рядка парною чи непарною
        inputString.substring(middleIndex - 1, middleIndex + 1) // Якщо довжина рядка парна, цей рядок коду використовує метод substring(), щоб взяти підрядок з середини рядка. Початковий індекс від (middleIndex - 1) до (middleIndex + 1) включно. Це означає, що в результаті буде збережено два символи з середини рядка.
    } else {
        inputString[middleIndex].toString() // Якщо довжина рядка непарна, цей рядок коду визначає символ, який знаходиться у середині рядка. Він конвертує цей символ в рядок, використовуючи метод toString().
    }
    println("Середній символ(и): $resultString")

//    10. Створити таблицю множення розміром NxN. Для N = 3:
//1 2 3
//2 4 6
//3 6 9
//Як відповідь має бути [[1,2,3],[2,4,6],[3,6,9]].

    print("Введіть розмір таблиці множення (N): ")
    val n = readlnOrNull()?.toIntOrNull() // Оператор ?.toIntOrNull() конвертує отриманий рядок в ціле число, якщо це можливо.
    if (n != null && n > 0) { //Перевіряється, чи значення n не є null і чи воно більше за 0.

        val multiplicationTable = Array(n) { IntArray(n) } // Створюється двовимірний масив (таблиця множення) розміром n x n. Кожен рядок у масиві - це масив цілих чисел

        for (i in 0..<n) { // Цикл, який проходиться по рядках таблиці множення.

            for (j in 0..<n) { // Цикл, який проходиться по стовпцях у кожному рядку таблиці множення.

                multiplicationTable[i][j] = (i + 1) * (j + 1) // У кожну комірку таблиці множення записується добуток відповідних індексів i та j плюс одиниця (таблиця множення починається з 1, а не з 0).
            }
        }
        // Виведення таблиці множення
        for (row in multiplicationTable) { // Цикл, який проходиться по кожному рядку в таблиці множення.
            println(row.joinToString(" ")) // Кожний рядок масиву виводиться на консоль, при цьому числа в рядку розділяються пробілами.
        }
    } else {
        println("Некоректне значення для розміру таблиці множення.") // Якщо значення n є некоректним (введено null або число менше або дорівнює 0)
    }
}
